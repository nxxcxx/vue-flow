{
  "nodes": [
    {
      "name": "Geometry",
      "uuid": "51c574c7-f47f-43cf-aa27-94871e871560",
      "position": {
        "x": 50,
        "y": 128
      },
      "_fnstr": "this.init = input => {\n  this.geometry = new THREE.IcosahedronGeometry(\n    600,\n    1\n  )\n}\n\nthis.process = input => {\n  return {\n    Geometry: this.geometry\n  }\n}\n\nthis.flush = () => {\n  this.geometry.dispose()\n\tdelete this.geometry\n}\n",
      "input": [],
      "output": [
        {
          "name": "Geometry",
          "uuid": "6d69b216-e2ea-4a7d-8cb5-3d62bdbaf241"
        }
      ],
      "nodes": [],
      "connections": []
    },
    {
      "name": "Material",
      "uuid": "36a91bc9-d44a-4c1a-a880-f714d12ce8aa",
      "position": {
        "x": 50,
        "y": 189
      },
      "_fnstr": "this.init = input => {\n  this.material = new THREE.MeshBasicMaterial( { \n    \tcolor: 0xffffff, \n    \twireframe: true,\n      wireframeLinewidth: 2\n  \t}\n  )\n}\n\nthis.process = input => {\n  return {\n    Material: this.material\n  }\n}\n\nthis.flush = () => {\n  this.material.dispose()\n  delete this.material\n}\n",
      "input": [],
      "output": [
        {
          "name": "Material",
          "uuid": "9b739b19-babb-4f57-8648-21e45a938f1b"
        }
      ],
      "nodes": [],
      "connections": []
    },
    {
      "name": "Mesh",
      "uuid": "4d9dc0b4-44ba-4626-9087-b42b3be2d5a1",
      "position": {
        "x": 164,
        "y": 147
      },
      "_fnstr": "this.init = input => {\n  this.mesh = new THREE.Mesh(\n    input.Geometry,\n    input.Material\n  )\n}\n\nthis.process = input => {\n  return {\n    Mesh: this.mesh\n  }\n}\n\nthis.flush = () => {\n  delete this.mesh\n}\n",
      "input": [
        {
          "name": "Geometry",
          "uuid": "53fdc96c-5491-4483-8b19-7b42f2fe71c8"
        },
        {
          "name": "Material",
          "uuid": "1d14ce97-8ba8-4e0d-9a57-9c592b859331"
        }
      ],
      "output": [
        {
          "name": "Mesh",
          "uuid": "89717ab8-b273-46d2-a24b-9a8c6a63a3d8"
        }
      ],
      "nodes": [],
      "connections": []
    },
    {
      "name": "Cloner",
      "uuid": "0a2752fb-5f99-4e5c-b16f-3975e01a4ebf",
      "position": {
        "x": 316,
        "y": 146
      },
      "_fnstr": "this.init = input => {\n  let c = 100\n  this.meshes = new THREE.Object3D()\n  Array( c ).fill( null ).map( x => {\n    let mesh = input.Mesh.clone()\n    mesh.material = mesh.material.clone()\n    return this.meshes.add( mesh )\n  } )\n}\n\nthis.process = input => {\n  return {\n    'Mesh[]': this.meshes\n  }\n}\n\nthis.flush = () => {\n  this.meshes.children.forEach( mesh => {\n    mesh.geometry.dispose()\n    mesh.material.dispose()\n  } )\n  delete this.meshes\n}",
      "input": [
        {
          "name": "Mesh",
          "uuid": "5931e3cb-aebc-44a0-8d9e-8123cfe39f6b"
        }
      ],
      "output": [
        {
          "name": "Mesh[]",
          "uuid": "b2edd98a-99c1-44c9-8776-4a9632de398b"
        }
      ],
      "nodes": [],
      "connections": []
    },
    {
      "name": "DATA",
      "uuid": "68f0eb9c-0d73-4098-8e61-37bdfbb0ad18",
      "position": {
        "x": 51,
        "y": 50
      },
      "_fnstr": "this.init = () => {\n\tthis.clock = new THREE.Clock()\n}\n\nthis.process = () => {\n  let dt = this.clock.getDelta()\n  return {\n    X: 1.0 * dt,\n    Y: this.clock.elapsedTime,\n    Z: 1.5\n  }\n}\n\nthis.flush = () => {\n\t\n}",
      "input": [],
      "output": [
        {
          "name": "Z",
          "uuid": "e5e379b8-d8c8-447c-9f14-747d35e81697"
        },
        {
          "name": "Y",
          "uuid": "b8855666-0218-47e6-be76-a022ba3bc1d2"
        },
        {
          "name": "X",
          "uuid": "dd3e35b0-337b-4218-a17b-d22d001151bc"
        }
      ],
      "nodes": [],
      "connections": []
    },
    {
      "name": "XPack-FDA0",
      "uuid": "fda0fbcd-31e8-48d5-8bce-9118f3375203",
      "position": {
        "x": 224,
        "y": 50
      },
      "_fnstr": "",
      "input": [
        {
          "name": "Gain",
          "uuid": "7fa9becc-7e35-47f4-bf07-85204d51f546",
          "_via": "75671800-8f03-41ff-b86d-ed1f6155a67c"
        }
      ],
      "output": [
        {
          "name": "Freq",
          "uuid": "bd9b4301-0991-45d5-aef2-cad54b86490f",
          "_via": "8be9f178-2e45-4b27-9044-7edac70ab156"
        }
      ],
      "nodes": [
        {
          "name": "VIA",
          "uuid": "c0fd73b5-2548-4f8d-8f2d-e0efabb726c3",
          "position": {
            "x": 50,
            "y": 50
          },
          "_fnstr": "",
          "input": [],
          "output": [
            {
              "name": "Gain",
              "uuid": "75671800-8f03-41ff-b86d-ed1f6155a67c",
              "_via": "7fa9becc-7e35-47f4-bf07-85204d51f546"
            }
          ],
          "nodes": [],
          "connections": []
        },
        {
          "name": "AUDIO",
          "uuid": "b83f8c23-91b3-443e-903d-2420409ae6fb",
          "position": {
            "x": 50,
            "y": 131
          },
          "_fnstr": "this.init = () => {\n  this.audioCtx = new (window.AudioContext || window.webkitAudioContext)()\n}\n\nthis.process = () => {\n  return {\n  \tContext: this.audioCtx\n  }\n}\n\nthis.flush = () => {\n}\n",
          "input": [],
          "output": [
            {
              "name": "Context",
              "uuid": "3f4032ff-a0cf-4cc5-9134-769eb94ce169"
            }
          ],
          "nodes": [],
          "connections": []
        },
        {
          "name": "INP STREAM SRC",
          "uuid": "300a7782-413e-40c3-92e3-d6813d0f6a93",
          "position": {
            "x": 197,
            "y": 93
          },
          "_fnstr": "this.init = ( input ) => {\n\tlet self = this\n\tthis.audio = document.createElement(\"audio\")\n\tthis.audio.crossOrigin = \"anonymous\";\n\tthis.audio.play()\n\tthis.sourceNode = input.Context.createMediaElementSource( this.audio )\n\tthis.sourceNode.connect( input.Context.destination )\n  \n\tfunction get( url, callback ) {\n\t\tvar request = new XMLHttpRequest()\n\t\trequest.onreadystatechange = () => { \n\t\t\tif ( request.readyState === 4 && request.status === 200 ) {\n\t\t\t\tcallback( request.responseText )\n\t\t\t}\n\t\t}\n\t\trequest.open( 'GET', url, true )\n\t\trequest.send( null )\n\t}\n\n\tvar clientParam = \"client_id=aae0cd3ce269784234bb78aa6d485394\"\n\n  function randomTrack() {\n    get( `http://api.soundcloud.com/tracks/?${clientParam}`, res => {\n      let tracks = JSON.parse( res )\n      let rndTrack = tracks[ ~~( Math.random() * tracks.length ) ]\n      console.log( 'TRACK:', rndTrack )\n      self.audio.src = `${rndTrack.stream_url}?${clientParam}`\n    } )\n  }\n\t\n  randomTrack()\n\t\n}\n\nthis.process = ( input ) => {\n\treturn {\n\t\tNode: this.sourceNode\n\t}\n}\n\nthis.flush = () => {\n\tif ( this.audio ) {\n\t\tthis.audio.pause()\n\t\tthis.audio.currentTime = 0\n\t}\n}",
          "input": [
            {
              "name": "Context",
              "uuid": "67db3c5c-2de2-40bb-8ec7-49eef639dc8e"
            }
          ],
          "output": [
            {
              "name": "Node",
              "uuid": "bfdbb4b9-f795-4d7f-b00a-b8d9ee291bf0"
            }
          ],
          "nodes": [],
          "connections": []
        },
        {
          "name": "GAIN",
          "uuid": "0b5e0509-9ddc-4915-b37f-80507e4aad01",
          "position": {
            "x": 370,
            "y": 50
          },
          "_fnstr": "this.init = ( input ) => {\n  this.gainNode = input.Context.createGain()\n}\n\nthis.process = ( input ) => {\n  input.Node && input.Node.connect( this.gainNode )\n  this.gainNode.gain.value = input.Gain || 1.0\n  return {\n  \tNode: this.gainNode\n  }\n}\n\nthis.flush = () => {\n}\n",
          "input": [
            {
              "name": "Gain",
              "uuid": "450bc860-5435-47a5-9e9f-a14c267f87cb"
            },
            {
              "name": "Context",
              "uuid": "3db90ff7-ca85-41b8-801b-d47464e4d776"
            },
            {
              "name": "Node",
              "uuid": "96f7984f-4f16-400c-8346-a6fd60d82ca0"
            }
          ],
          "output": [
            {
              "name": "Node",
              "uuid": "54c2bb9f-ba71-4495-b81e-856b9b345ae5"
            }
          ],
          "nodes": [],
          "connections": []
        },
        {
          "name": "ANALYZER",
          "uuid": "c9f116bf-c887-45d6-b605-c81c0a417676",
          "position": {
            "x": 532,
            "y": 115
          },
          "_fnstr": "this.init = ( input ) => {\n  this.analyzer = input.Context.createAnalyser()\n  this.analyzer.fftSize = 2048\n\tthis.freqArray = new Uint8Array( this.analyzer.frequencyBinCount )\n  // console.log( 'freqBin', this.analyzer.frequencyBinCount )\n}\n\nthis.process = ( input ) => {\n  input.Node && input.Node.connect( this.analyzer )\n  this.analyzer.getByteFrequencyData( this.freqArray )\n  let thres = computeAverage( this.freqArray, 0, 1024 ) / 256\n\treturn {\n\t\tFreq: thres\n\t}\n}\n\nthis.flush = () => {\n}\n\nfunction computeAverage( freqArray, start, end ) {\n\treturn freqArray.slice( start, end ).reduce( ( a, b ) => a + b ) / ( end - start )\n}",
          "input": [
            {
              "name": "Node",
              "uuid": "b85a93b3-8704-4374-b641-48853a268e3e"
            },
            {
              "name": "Context",
              "uuid": "338a8a39-b118-4d37-817e-7e6b9233560d"
            }
          ],
          "output": [
            {
              "name": "Freq",
              "uuid": "b8ebc478-00fa-4ee4-a3d9-bdae27e838b4"
            }
          ],
          "nodes": [],
          "connections": []
        },
        {
          "name": "VIA",
          "uuid": "5f6dd9d5-b5a0-45e1-989b-1c9e79fd9281",
          "position": {
            "x": 683,
            "y": 115
          },
          "_fnstr": "",
          "input": [
            {
              "name": "Freq",
              "uuid": "8be9f178-2e45-4b27-9044-7edac70ab156",
              "_via": "bd9b4301-0991-45d5-aef2-cad54b86490f"
            }
          ],
          "output": [],
          "nodes": [],
          "connections": []
        }
      ],
      "connections": [
        [
          "75671800-8f03-41ff-b86d-ed1f6155a67c",
          "450bc860-5435-47a5-9e9f-a14c267f87cb"
        ],
        [
          "3f4032ff-a0cf-4cc5-9134-769eb94ce169",
          "67db3c5c-2de2-40bb-8ec7-49eef639dc8e"
        ],
        [
          "bfdbb4b9-f795-4d7f-b00a-b8d9ee291bf0",
          "96f7984f-4f16-400c-8346-a6fd60d82ca0"
        ],
        [
          "3f4032ff-a0cf-4cc5-9134-769eb94ce169",
          "3db90ff7-ca85-41b8-801b-d47464e4d776"
        ],
        [
          "54c2bb9f-ba71-4495-b81e-856b9b345ae5",
          "b85a93b3-8704-4374-b641-48853a268e3e"
        ],
        [
          "3f4032ff-a0cf-4cc5-9134-769eb94ce169",
          "338a8a39-b118-4d37-817e-7e6b9233560d"
        ],
        [
          "b8ebc478-00fa-4ee4-a3d9-bdae27e838b4",
          "8be9f178-2e45-4b27-9044-7edac70ab156"
        ]
      ]
    },
    {
      "name": "Modifier",
      "uuid": "5a42b102-b884-4cf4-855b-383b50a724b4",
      "position": {
        "x": 476,
        "y": 51
      },
      "_fnstr": "this.init = input => {\n  \n}\n\nthis.process = input => {\n  this.meshes = input.OBJ.children\n  input.OBJ.children.forEach( ( mesh, idx ) => {\n    let si = ( idx + 1 ) / 100\n  \tlet sx = Math.pow( input.D3 * ( 1.0 - si ), 3.5 ) * 10.0 + si * 1.0\n    let iv = ( 1.0 - idx / 100 ) * 0.5\n    mesh.scale.setScalar( sx * 0.5 )\n    mesh.rotation.x += input.D1 * iv\n    mesh.rotation.z += input.D1 * iv\n    mesh.rotation.y += input.D1 * iv\n    mesh.material.color.setHSL( Math.cos( ( input.D2 * 0.15) + idx * 0.005 ), 0.95, 0.5 )\n    mesh.material.transparent = true\n    mesh.material.opacity = 0.01 + ( 1.0 - idx / 100 ) * input.D3\n  } )\n  return {\n    OBJ: input.OBJ\n  }\n}\n\nthis.flush = () => {\n\n}",
      "input": [
        {
          "name": "D3",
          "uuid": "61925410-6259-439c-b7cf-711302d07bb5"
        },
        {
          "name": "D2",
          "uuid": "390cb6c1-bfd9-4e24-a0ed-006eb8e91b50"
        },
        {
          "name": "D1",
          "uuid": "2291b24e-092b-4b17-a039-bafc20c35ff9"
        },
        {
          "name": "OBJ",
          "uuid": "a83236f8-1672-4fe2-a275-bdc20172a973"
        }
      ],
      "output": [
        {
          "name": "OBJ",
          "uuid": "7a9e0de0-9b74-42ec-9e5c-db6a411958b1"
        }
      ],
      "nodes": [],
      "connections": []
    },
    {
      "name": "XPack-5562",
      "uuid": "55620c99-6859-4f13-9417-de608cf1b895",
      "position": {
        "x": 610,
        "y": 51
      },
      "_fnstr": "",
      "input": [
        {
          "name": "OBJ0",
          "uuid": "1aba94c5-86ee-4285-91b9-30d2a896c6fd",
          "_via": "afa7f1ec-12f1-47e6-924d-42eeabff24a1"
        }
      ],
      "output": [],
      "nodes": [
        {
          "name": "VIA",
          "uuid": "c7e6e040-c943-4dfc-ac37-cb09a627afbf",
          "position": {
            "x": 435,
            "y": 57
          },
          "_fnstr": "",
          "input": [],
          "output": [],
          "nodes": [],
          "connections": []
        },
        {
          "name": "CAMERA",
          "uuid": "80914c3a-70c6-4d3c-880e-f1b07e664ca6",
          "position": {
            "x": 186,
            "y": 50
          },
          "_fnstr": "this.init = ( input, engine ) => {\n  this.camera = new THREE.PerspectiveCamera( 75, engine.width / engine.height, 1, 10000 )\n  this.camera.position.z = 1000\n}\n\nthis.process = ( input, engine ) => {\n  this.camera.aspect = engine.width / engine.height\n  this.camera.updateProjectionMatrix()\n  return {\n    Camera: this.camera\n  }\n}\n\nthis.flush = () => {\n  delete this.camera\n}",
          "input": [],
          "output": [
            {
              "name": "Camera",
              "uuid": "13f3fab8-2072-4de7-9e5a-5e647ea39248"
            }
          ],
          "nodes": [],
          "connections": []
        },
        {
          "name": "VIA",
          "uuid": "cc1af423-f89f-49b3-9f8f-cf1023cd2b7b",
          "position": {
            "x": 50,
            "y": 100
          },
          "_fnstr": "",
          "input": [],
          "output": [
            {
              "name": "OBJ0",
              "uuid": "afa7f1ec-12f1-47e6-924d-42eeabff24a1",
              "_via": "1aba94c5-86ee-4285-91b9-30d2a896c6fd"
            }
          ],
          "nodes": [],
          "connections": []
        },
        {
          "name": "SCENE",
          "uuid": "ff60190e-b3cf-47d0-9188-e95771ca1c9c",
          "position": {
            "x": 155,
            "y": 101
          },
          "_fnstr": "this.init = input => {\n  this.scene = new THREE.Scene()\n}\n\nthis.process = input => {\n  this.scene.children[ 0 ] = input.OBJ0\n  return {\n    Scene: this.scene\n  }\n}\n\nthis.flush = () => {\n  this.scene.children = []\n\tdelete this.scene\n}",
          "input": [
            {
              "name": "OBJ0",
              "uuid": "e4c87c73-7eea-494a-b1cb-c178b48975a0"
            }
          ],
          "output": [
            {
              "name": "Scene",
              "uuid": "e8534b90-307e-46db-9a8f-5454620b961b"
            }
          ],
          "nodes": [],
          "connections": []
        },
        {
          "name": "RENDERER",
          "uuid": "cab842b8-f42a-4376-9f97-96d931fa2f17",
          "position": {
            "x": 308,
            "y": 51
          },
          "_fnstr": "this.init = ( input, engine ) => {\n  let renderer = engine.renderer\n  renderer.setClearColor( 0x000000, 0 )\n  renderer.clear()\n}\n\nthis.process = ( input, engine ) => {\n  let renderer = engine.renderer\n  renderer.render( input.Scene, input.Camera )\n}\n\nthis.flush = () => {\n\t\n}",
          "input": [
            {
              "name": "Camera",
              "uuid": "ab381cad-7036-4abe-bf6f-edd7b9051d49"
            },
            {
              "name": "Scene",
              "uuid": "2ee00718-03e4-43ab-abc3-3ee5510737b3"
            }
          ],
          "output": [],
          "nodes": [],
          "connections": []
        }
      ],
      "connections": [
        [
          "13f3fab8-2072-4de7-9e5a-5e647ea39248",
          "ab381cad-7036-4abe-bf6f-edd7b9051d49"
        ],
        [
          "e8534b90-307e-46db-9a8f-5454620b961b",
          "2ee00718-03e4-43ab-abc3-3ee5510737b3"
        ],
        [
          "afa7f1ec-12f1-47e6-924d-42eeabff24a1",
          "e4c87c73-7eea-494a-b1cb-c178b48975a0"
        ]
      ]
    }
  ],
  "connections": [
    [
      "6d69b216-e2ea-4a7d-8cb5-3d62bdbaf241",
      "53fdc96c-5491-4483-8b19-7b42f2fe71c8"
    ],
    [
      "9b739b19-babb-4f57-8648-21e45a938f1b",
      "1d14ce97-8ba8-4e0d-9a57-9c592b859331"
    ],
    [
      "89717ab8-b273-46d2-a24b-9a8c6a63a3d8",
      "5931e3cb-aebc-44a0-8d9e-8123cfe39f6b"
    ],
    [
      "e5e379b8-d8c8-447c-9f14-747d35e81697",
      "7fa9becc-7e35-47f4-bf07-85204d51f546"
    ],
    [
      "b2edd98a-99c1-44c9-8776-4a9632de398b",
      "a83236f8-1672-4fe2-a275-bdc20172a973"
    ],
    [
      "7a9e0de0-9b74-42ec-9e5c-db6a411958b1",
      "1aba94c5-86ee-4285-91b9-30d2a896c6fd"
    ],
    [
      "dd3e35b0-337b-4218-a17b-d22d001151bc",
      "2291b24e-092b-4b17-a039-bafc20c35ff9"
    ],
    [
      "b8855666-0218-47e6-be76-a022ba3bc1d2",
      "390cb6c1-bfd9-4e24-a0ed-006eb8e91b50"
    ],
    [
      "bd9b4301-0991-45d5-aef2-cad54b86490f",
      "61925410-6259-439c-b7cf-711302d07bb5"
    ]
  ]
}
